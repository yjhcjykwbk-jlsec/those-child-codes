//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import types.Function;

import java.util.*;

class st
{
	boolean noop;
	public String follow,label;
	public ArrayList<Integer> def,use,v_in,v_out;
	public st()
	{
		noop=false;
		follow=label=null;
		def=new ArrayList<Integer>();
		use=new ArrayList<Integer>();
		v_in=new ArrayList<Integer>();
		v_out=new ArrayList<Integer>();
	}
}
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,Object> implements GJVisitor<R,Object> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public HashMap<String,Integer> labels;
   public R visit(NodeList n, Object argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, Object argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   
   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.noop=true;
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, Object v) {
      st item=(st)v;
      item.use.add(n.f1.f1.f0.kind);
      item.follow=n.f2.f0.tokenImage;
      return null;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.follow=n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.use.add(n.f1.f1.f0.kind);/////////////////////
      item.use.add(n.f3.f1.f0.kind);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.def.add(n.f1.f1.f0.kind);
      item.use.add(n.f2.f1.f0.kind);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.def.add(n.f1.f1.f0.kind);
      n.f2.accept(this, v);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, Object argu) {
      R _ret=null;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Vector<Node> nodes=n.f1.f0.nodes;
      /*every node represents a sentence*/
      /*and give it an alive analysis*/
      int m=nodes.size();
      st []v=new st[m];
      labels=new HashMap<String,Integer>();
      /*record the number of labels in a hash */
      for(int i=0;i<m;i++) 
      {
    	  Node nodei=nodes.elementAt(i);
    	  nodei.accept(this,(Object)v[i]);
    	  if(v[i].label!=null)
    	  {
    		  labels.put(v[i].label, i);
    	  }
      }
      boolean change=true;
      while(change)
      {
    	  change=false;
    	  for(int i=m-1;i>=0;i--)
    	  {
    		  if(v[i].noop) continue;//"labeli noop" will not be considered twice
    		  ArrayList<Integer> newin;
    		  Integer k=labels.get(v[i].follow);
    		  if(k>-1) v[i].v_out.addAll(v[k].v_in);
    		  if(i<m-1&&v[i].label==null) v[i].v_out.addAll(v[i+1].v_in);
    		  if(v[i].label!=null&&v[i]<m-2) v[i].v_out.addAll(v[i+2].v_in);
    		  newin=new ArrayList<Integer>(v[i].v_out);
    		  newin.removeAll(v[i].def);
    		  newin.addAll(v[i].use);
    		  if(!v[i].v_in.equals(newin))
    		  {
    			  change=true;
    			  v[i].v_in=newin;
    		  }
    	  }
      }
      /*now we will deliver the registers*/
      
      n.f3.accept(this, argu);
      return _ret;
   }
   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }
   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, Object follow) {
      return n.f0.accept(this, follow);
   }
   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }
   
   
   
   
   
   
   
   
   
   
   
   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, Object argu) {
      R _ret=null;
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.use.add(n.f1.f1.f0.kind);
      n.f2.accept(this, v);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, Object argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }



   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.use.add(n.f1.f0.kind);    		  
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, Object argu) {
      R _ret=null;  
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, Object v) {
      R _ret=null;
      st item=(st)v;
      item.label=n.f0.tokenImage;
      return _ret;
   }

}
