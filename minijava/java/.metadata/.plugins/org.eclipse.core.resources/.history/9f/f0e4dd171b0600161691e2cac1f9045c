//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import types.*;
import java.util.*;
import temp.*;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class PigletVisit extends DepthFirstVisitor {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	//
	// User-generated visitor methods below
	//
	TypeTable types;
	ClassTable table;
	Function func;
	int reg;// current register number
	int label;
	int error;
	int noerror;
	/*the son-object will be casted to its father class b*/
	void typeCast(String a,String b,int castReg)
	{
		ClassTable _table = types.getClass(a);
		ClassTable _fatherTable=types.getClass(b);
		while (_table!= _fatherTable) {
			System.out.println("hload temp " + (castReg) + " temp "
					+ (castReg)+" "+(4*(_table.var.getSize()+1)));
			_table=_table.father;
		}
	}
	/**
	 * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
	 */
	public void visit(Goal n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	public PigletVisit(TypeTable types) {
		this.types = types;
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
	 * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
	 * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
	 * "}" f16 -> "}"
	 */
	public void visit(MainClass n) {
		n.f14.accept(this);
	}

	/**
	 * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
	 */
	public void visit(TypeDeclaration n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4
	 * -> ( MethodDeclaration() )* f5 -> "}"
	 */
	public void visit(ClassDeclaration n) {
		System.out.println();
		table = types.getClass(n.f1.f0.tokenImage);
		n.f4.accept(this);
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
	 * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
	 */
	public void visit(ClassExtendsDeclaration n) {
		table = types.getClass(n.f1.f0.tokenImage);
		n.f6.accept(this);
	}

	/**
	 * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> (
	 * FormalParameterList() )? f5 -> ")" f6 -> "{" f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )* f9 -> "return" f10 -> Expression() f11 -> ";" f12
	 * -> "}"
	 */
	public void visit(MethodDeclaration n) {
		func = table.getFunc(n.f2.f0.tokenImage);
		int index = 0;
		int size = func.body.getSize();
		int parasize = func.para.size();
		// initialize marks in the process
		error = 0;
		noerror = 0;
		label = 0;
		System.out.println();
		/*the name of a process*/
		System.out.println(table.name + "_" + func.name + " [" + (parasize + 1)
				+ "]");
		System.out.println("begin");
		/*prevent a uninitialized call*/
		System.out.println("cjump lt 0 temp 0 noerror"+(++noerror));
		System.out.println("error");
		System.out.println("noerror"+(noerror)+" noop");
		
		/*store vars declared in function*/
		/*initialize them*/
		for (index = parasize+1; index <= size; index++) {
			System.out.println("mov temp " + index + " 0");
		}
		reg=size+1;
		/*handle statements*/
		n.f8.accept(this);
		System.out.print("return ");
		n.f10.accept(this);
		System.out.println("end");
	}

	/**
	 * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
	 * IfStatement() | WhileStatement() | PrintStatement()
	 */
	public void visit(Statement n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
	 */
	public void visit(Block n) {
		n.f1.accept(this);
	}

	/**
	 * need to judge in which scope  f0 -> Identifier() f1 -> "=" f2
	 * -> Expression() f3 -> ";"
	 */
	public void visit(AssignmentStatement n) {
		String name = n.f0.f0.tokenImage;
		/*declared in function,and stored in register from 1 to n*/
		if(func.declaredInFunc(name))
			System.out.println("mov temp " 
					+ (func.getNum(name)) + " ");
		/*declared in class,and stored in memory from temp0 4 to 4*n*/
		else
		{
			System.out.println("hstore temp 0 "
				+ (func.getNum(name) * 4) + " ");
		}
		/*type cast*/
		if(n.rightType!=null)
		{
			int castReg=(++reg);
			System.out.println("begin");
			System.out.println("mov temp "+castReg+" ");
			n.f2.accept(this);
			
			
		}
		else		n.f2.accept(this);
	}

	/**
	 * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 ->
	 * Expression() f6 -> ";"
	 */
	public void visit(ArrayAssignmentStatement n) {
		int arrayReg=(++reg);
		// assign a var stored in function
		System.out.println("mov temp " + (arrayReg) +" ");
		n.f0.accept(this);
		/**/
		// prevent an uninitialized array
		//if arrayReg<=0 error
		System.out.println("cjump lt temp " + (arrayReg) + " noerror" + (++noerror));
		System.out.println("error"); 
		System.out.println("noerror"+noerror+" noop"); 
		
		// the index will be calculated and stored in reg+1
		int indexReg=(++reg);
		System.out.println("mov temp " + (indexReg));
		n.f2.accept(this);
		// prevent a beyond array
		int sizeReg=(++reg);
		System.out.println("hload temp " + (sizeReg) + " temp " + (arrayReg) + " 0");
		// if indexReg<sizeReg,jump
		System.out.println("cjump lt temp " + (indexReg) + " temp " + (sizeReg)
				+ " noerror" + (++noerror));
		System.out.println("error"); 
		System.out.println("noerror"+noerror+" noop"); 
		// 	index=4*indexReg+4
		System.out.println("mov temp " + (indexReg) + " plus 1 temp " + (indexReg));
		System.out.println("mov temp " + (indexReg) + " times 4 temp " + (indexReg));
		//	arrayReg=array element pointer
		System.out.println("mov temp " + (arrayReg) + " plus temp " + (arrayReg)+" temp "+(indexReg)+" ");
		System.out.println("hstore temp " + (arrayReg) +" 0 ");
		n.f5.accept(this);
	}

	/**
	 * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
	 * "else" f6 -> Statement()
	 */
	public void visit(IfStatement n) {
		n.outlabel = (++label);
		n.iflabel = (++label);
		n.elselabel = (++label);
		int ifReg=(++reg);
		System.out.println("mov temp " + (ifReg)+" ");
		n.f2.accept(this);
		/*if ifReg<1 ,goto else*/
		System.out.println("cjump lt  temp " + (ifReg)+" 1" + " elselabel" + (n.elselabel));
		System.out.println("iflabel" + (n.iflabel) + " NOOP");
		n.f4.accept(this);
		System.out.println("jump label" + (n.outlabel));
		System.out.println("elselabel" + (n.elselabel) + " NOOP");
		n.f6.accept(this);
		System.out.println("outlabel" + (n.outlabel) + " NOOP");
	}

	/**
	 * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
	 */
	public void visit(WhileStatement n) {
		n.iflabel = (++label);
		n.outlabel = (++label);
		int ifReg=(++reg);
		System.out.println("whilelabel" + (n.iflabel) + " NOOP");
		System.out.println("mov temp " + (ifReg)+" ");
		n.f2.accept(this);
		// if ifReg<1 ,break
		System.out.println("cjump lt  temp " +(ifReg)+" 0 "+ "outlabel" + (n.outlabel));
		n.f4.accept(this);
		System.out.println("jump whilelabel" + n.iflabel);
		System.out.println("outlabel" + (n.outlabel) + " NOOP");
	}

	/**
	 * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
	 * ";"
	 */
	public void visit(PrintStatement n) {
		System.out.println("print ");
		n.f3.accept(this);
	}

	/**
	 * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
	 * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
	 * MessageSend() | PrimaryExpression()
	 */
	public void visit(Expression n) {
		//System.out.println("begin");
		///stack.add(reg);
		n.f0.accept(this);
		///reg = stack.pop();
		//System.out.println("end");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "&&" f2 -> PrimaryExpression()
	 */
	public void visit(AndExpression n) {
		int outlabel = ++label;
		int resReg=(++reg);
		//stack.add(reg);
		System.out.println("begin");
		System.out.println("mov temp " + (resReg)+" ");
		n.f0.accept(this);
		System.out.println("cjump lt temp " + (resReg) +" 1"+ " andlabel" + (outlabel));
		System.out.println("mov temp " + (resReg));
		n.f2.accept(this);
		System.out.println("andlabel" + (outlabel) + " NOOP");
		System.out.println("return temp " + (resReg));
		System.out.println("end");
	}

/**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
	public void visit(CompareExpression n) {
		System.out.println("lt ");
		n.f0.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
	 */
	public void visit(PlusExpression n) {
		System.out.println("plus ");
		n.f0.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
	 */
	public void visit(MinusExpression n) {
		System.out.println("minus ");
		n.f0.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
	 */
	public void visit(TimesExpression n) {
		System.out.println("times ");
		n.f0.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
	 */
	public void visit(ArrayLookup n) {
		// prevent array problems???
		int arrayReg=(++reg); 
		System.out.println("begin");
		System.out.println("mov temp " + (arrayReg)+" ");
		n.f0.accept(this);
		/*prevent uninitialized visit*/
		System.out.println("cjump lt 0 temp "+ arrayReg+ " noerror"+(++noerror));
		System.out.println("error");
		System.out.println("noerror"+noerror+" noop");
		
		int indexReg =++reg;
		System.out.println("mov temp " + (indexReg));
		n.f2.accept(this);
		int sizeReg =++reg;
		System.out.println("hload temp " + (sizeReg)+" temp "+(arrayReg)+" 0");
		/*prevent out of range*/
		System.out.println("cjump lt  temp "+ indexReg+ " temp "+sizeReg+" noerror"+(++noerror));
		System.out.println("error");
		System.out.println("noerror"+noerror+" noop");
		
		System.out.println("mov temp " + (indexReg)+" plus temp "+(indexReg)+" 1");
		System.out.println("mov temp " + (indexReg)+ " times 4 temp "+(indexReg));
		System.out.println("mov temp " + (arrayReg)+" plus temp "+(arrayReg)+" temp "+indexReg);
		System.out.println("return temp " + arrayReg);
		System.out.println("end");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
	 */
	public void visit(ArrayLength n) {
		System.out.println("begin");
		int arrayReg = ++reg;
		System.out.println("mov temp " + (arrayReg)+" ");
		n.f0.accept(this);
		// if the array is uninitialized
		System.out.println("cjump lt 0 temp " + (arrayReg) + " noerror" + (++noerror));
		System.out.println("error");
		System.out.println("noerror"+noerror+" noop");
		
		System.out.println("hload temp " + (arrayReg) + " temp " + (arrayReg) + " 0");
		System.out.println("return temp " + (arrayReg));
		System.out.println("end");
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> (
	 * ExpressionList() )? f5 -> ")"
	 */
	public void visit(MessageSend n) {
		int objectReg = (++reg);// duotai!!!!
		int functableReg = (++reg);
		int funcReg = (++reg);
		String name=n.f2.f0.tokenImage;
		System.out.println("call");
		System.out.println("begin");
		System.out.println("mov temp " + (objectReg)+" ");
		n.f0.accept(this);
		ClassTable _table = types.getClass(n.className);
		ClassTable _castTable=_table;
		while (_castTable.func.get(name) == null) {
			_castTable=_castTable.father;
		}
		typeCast(_table.name,_castTable.name,objectReg);
		System.out.println("hload temp " + (functableReg) + " temp "+(objectReg)+" 0");
		System.out.println("hload temp " + (funcReg) + " temp "+(functableReg)+" "+(4*_table.func.getNum(name)));
		System.out.println("return temp "+funcReg);//func-reg store the address of process 
		System.out.println("end");
		System.out.println("( temp "+objectReg+" ");
		n.f4.accept(this);
		System.out.println(" ) ");
	}

	/**
	 * f0 -> Expression() f1 -> ( ExpressionRest() )*
	 */
	public void visit(ExpressionList n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> "," f1 -> Expression()
	 */
	public void visit(ExpressionRest n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
	 * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
	 * NotExpression() | BracketExpression()
	 */
	public void visit(PrimaryExpression n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public void visit(IntegerLiteral n) {
		System.out.println(n.f0.tokenImage);
	}

	/**
	 * f0 -> "true"
	 */
	public void visit(TrueLiteral n) {
		System.out.println("1");
	}

	/**
	 * f0 -> "false"
	 */
	public void visit(FalseLiteral n) {
		System.out.println("0");
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public void visit(Identifier n) {
		String name=n.f0.tokenImage;
		int resReg=(++reg);
		if (func.declaredInFunc(name)) 
		{
			System.out.println("temp " + (func.getNum(name)));
		}
		else {
			System.out.println("begin");
			System.out.println("hload temp " + (resReg) + " temp 0 " 
					+ (func.getNum(name) * 4) );
			System.out.println("return temp "+resReg);
			System.out.println("end");
		}
	}

	/**
	 * f0 -> "this"
	 */
	public void visit(ThisExpression n) {
		System.out.print("temp 0");
	}

	/**
	 * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
	 */
	public void visit(ArrayAllocationExpression n) {
		int sizeReg = (++reg);
		int resReg = (++reg);
		System.out.println("begin");
		System.out.println("mov temp " + (sizeReg)+" ");
		n.f3.accept(this);
		/*prevent f3<0*/
		/*f3==0 is legal*/
		System.out.println("cjump lt temp " + (sizeReg) + " 0 error"
				+ (++error));
		System.out.println("jump noerror"+(++noerror));
		System.out.println("error"+error+" noop");
		System.out.println("error");
		System.out.println("noerror"+noerror+" noop");
		
		System.out.println("mov temp " + (sizeReg)+" plus 1 temp "+sizeReg);
		System.out.println("mov temp " + (resReg) + " hallocate times 4 temp "
				+ sizeReg);
		System.out.println("return temp " + resReg);
		System.out.println("end");
	}

	/*get process*/
	String getProcess(ClassTable a, int i) {
		return a.name + "_" + a.func.getFunc(i);
	}

	/**
	 * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
	 */
	public void visit(AllocationExpression n) {
		System.out.println("begin");
		table = types.getClass(n.f1.f0.tokenImage);
		ClassTable curr = table;
		int i;
		int resReg = (++reg);
		int classReg = (++reg);
		int funcReg = (++reg);
		int classStoreReg = (++reg);

		int funcNum = 0;
		int varNum = 0;
		int classSize = 0;
		int fatherSize = 0;
		while (curr != null) {
			funcNum = curr.func.getSize();
			varNum = curr.var.getSize();
			classSize = varNum + 2;
			System.out.println("mov temp " + (classReg) + " hallocate "
					+ (4 * (classSize)) + " 0 ");
			System.out.println("mov temp " + (funcReg) + " hallocate "
					+ (4 * funcNum));
			// store functions
			for (i = 0; i < funcNum; i++) {
				System.out.println("store temp " + (funcReg) + " " + (4 * i)
						+ " " + getProcess(curr, i));
			}
			System.out.println("store temp " + (classReg) + " 0 " + "temp "
					+ (funcReg));

			// store vars
			for (i = 0; i < varNum; i++) {
				System.out.println("store temp " + (funcReg) + " "
						+ (4 * (i + 1)) + " " + curr.var.getVar(i));
			}

			// to return resreg
			if (curr == table) {
				System.out.println("mov temp " + resReg + " temp " + classReg);
			}
			// put class pointer(reg) into memory
			else {
				System.out.println("store temp " + classStoreReg + " 0 "
						+ "temp " + classReg);
			}
			// copy father-reg
			if (curr.father != null) {
				System.out.println("mov temp " + classStoreReg + " plus "
						+ "temp " + classReg + " " + (4 * (classSize - 1)));
				curr = curr.father;
			}
			// father is null
			else {
				System.out.println("hstore temp " + classReg + " "
						+ (4 * (classSize - 1)) + " 0 ");
				break;
			}
		}
		System.out.println("return temp " + resReg);
		System.out.println("end");
	}

	/**
	 * f0 -> "!" f1 -> Expression()
	 */
	public void visit(NotExpression n) {
		System.out.println("minus 1 ");
		n.f1.accept(this);
	}

	/**
	 * f0 -> "(" f1 -> Expression() f2 -> ")"
	 */
	public void visit(BracketExpression n) {
		n.f1.accept(this);
	}

}
